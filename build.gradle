plugins {
    id 'org.unbroken-dome.test-sets' version '3.0.1' apply false
    id 'maven-publish'
}

allprojects {
    repositories {
        mavenCentral()
    }

}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'java-test-fixtures'

    group = 'com.vivier_technologies'
    version = '0.1.0'

    task stage(dependsOn: ['build', 'clean'])
    build.mustRunAfter clean

    test {
        useJUnitPlatform()
    }

    dependencies {
        // This dependency is exported to consumers, that is to say found on their compile classpath.
        // api 'google.'

        // This dependency is used internally, and not exposed to consumers on their own compile classpath.
        implementation 'com.google.inject:guice:4.2.3'
        implementation 'org.apache.commons:commons-configuration2:2.7'
        implementation 'commons-beanutils:commons-beanutils:1.9.4'
        implementation 'commons-cli:commons-cli:20040117.000000'
        implementation 'it.unimi.dsi:fastutil:8.3.1'

        // Use JUnit test framework
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
        testImplementation 'org.mockito:mockito-core:3.3.3'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    }

    jar {
        manifest {
            attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java

                pom {
                    name = "Event Sequencer"
                    description = "A high performance sequenced message stream implementation for event sourcing architectures"
                    url = "https://github.com/vivier-technologies/sequencer"
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    developers {
                        developer {
                            id = "buckersew"
                            name = "Ed Buckney"
                            email = "vivier.technologies@gmail.com"
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/vivier-technologies/sequencer.git'
                        developerConnection = 'scm:git:https://github.com/vivier-technologies/sequencer.git'
                        url = 'https://github.com/vivier-technologies/sequencer.git'
                    }
                }
            }
        }

        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/vivier-technologies/sequencer"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

project(':sequencer') {

    apply plugin: 'org.unbroken-dome.test-sets'

    testSets {
        integrationTest
    }

    integrationTest {
        useJUnitPlatform()
    }

    dependencies {
        implementation project(':common'), project(':utils'), project(':messages')

        testImplementation testFixtures(project(':common'))
        testImplementation testFixtures(project(':utils'))

        integrationTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
        integrationTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test

    //ensures integration test always run even when not changed
    project.integrationTest {
        outputs.upToDateWhen { false }
    }
}

project(':messages') {
    dependencies {
        implementation project(':utils')
    }
}

project(':client') {
    dependencies {
        implementation project(':common'), project(':utils'), project(':messages')
    }
}

project(':repeater') {
    dependencies {
        implementation project(':common')
    }
}

project(':common') {
    dependencies {
        implementation project(':utils'), project(':messages')

        testImplementation testFixtures(project(':utils'))

        testFixturesImplementation project(':messages'), project(':utils')
    }
}
